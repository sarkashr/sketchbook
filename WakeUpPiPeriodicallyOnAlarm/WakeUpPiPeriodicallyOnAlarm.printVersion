/ **** INCLUDES *****
#include "SleepyPi2.h"
#include <TimeLib.h>
#include <LowPower.h>
#include <PCF8523.h>
#include <Wire.h>

const int LED_PIN = 13;

// Globals
// ++++++++++++++++++++ CHANGE ME ++++++++++++++++++
uint8_t  WakeUp_StartMinute   = 5;   // Minutes

unsigned long    MAX_RPI_TIME_TO_STAY_AWAKE_MS  = 99000;

#define kPI_CURRENT_THRESHOLD_MA   110                         
// Shutdown current threshold in mA. When the
// when the Rpi is below this, it is "shutdown"
// This will vary from Rpi model to Rpi model
// and you will need to fine tune it for each Rpi
// See Code below for tuning code
// ++++++++++++++++++++ END CHANGE ME ++++++++++++++++++

tmElements_t tm;
uint8_t   nextWakeTime;

void printTimeNow() {..}

uint8_t CalcNextWakeTime(void) {
  int interval[12] = {0, 5, 10, 15, 20,25, 30, 35, 40, 45, 50, 55};
  DateTime now = SleepyPi.readTime();
  int currentMinute = now.minute();
  for (int i=0; i<12; ++i) {
    if (currentMinute+1 < interval[i]) { // +1 so that at least 2 minutes difference
      nextWakeTime = interval[i];
      break;
    }
  }
  if (currentMinute >= 54) {
    nextWakeTime = 0;
  }
  return nextWakeTime;
}


void setup() {
  // Configure "Standard" LED pin
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN,LOW);    // Switch off LED

  // initialize serial communication: In Arduino IDE use "Serial Monitor"
  Serial.begin(9600);
  Serial.println("Starting, but I'm going to go to sleep for a while...");
  delay(250);

  SleepyPi.rtcInit(true);
  SleepyPi.enablePiPower(false);
  SleepyPi.enableExtPower(false);

  // Default the clock to the time this was compiled.
  // Comment out if the clock is set by other means
  // ...get the date and time the compiler was run
// if (getDate(__DATE__) && getTime(__TIME__)) {
//     // and configure the RTC with this info
//     SleepyPi.setTime(DateTime(F(__DATE__), F(__TIME__)));
// }

  printTimeNow();

//  Serial.print("Alarm Set for every: ");
//  Serial.print(WakeUp_StartMinute);
//  Serial.println(" minutes");

  // Calculate the initial Start Time
  nextWakeTime = CalcNextWakeTime();
}


void loop() {
    unsigned long TimeOutStart, ElapsedTimeMs,TimeOutEnd ;
    bool pi_running;

    // Allow wake up alarm to trigger interrupt on falling edge.
    attachInterrupt(0, alarm_isr, FALLING);   // Alarm pin

    SleepyPi.enableWakeupAlarm(true);

    // Setup the Alarm Time
    SleepyPi.setAlarm(nextWakeTime);

    // PrintRTCRegisters();   // for debug

    delay(500);

    // Enter power down state with ADC and BOD module disabled.
    // Wake up when wake up pin is low (which occurs when our alarm clock goes off)
    SleepyPi.powerDown(SLEEP_FOREVER, ADC_OFF, BOD_OFF);

    // Disable external pin interrupt on wake up pin.
    detachInterrupt(0);

    SleepyPi.ackAlarm();

    // At this point we've woken up
    nextWakeTime = CalcNextWakeTime();
    SleepyPi.enablePiPower(true);

    digitalWrite(LED_PIN,HIGH);   // Switch on LED
    Serial.println("I've Just woken up on the Alarm!");
    // Print the time
    printTimeNow();
    delay(50);
    digitalWrite(LED_PIN,LOW);    // Switch off LED

    // Do something on the Rpi here
    // Example: Take a Picture
    // This is the time that the Rpi will be "awake" for

    // Manage the Rpi shutdown. Give it a maximum time limit to stay awake
    // if it hasn't already shut down
//    delay(10000);        // wait to boot up a bit - (this delay should really be added to MAX_RPI_TIME_TO_STAY_AWAKE_MS)
    TimeOutStart = millis();
    ElapsedTimeMs = TimeOutStart;
    TimeOutEnd = TimeOutStart + MAX_RPI_TIME_TO_STAY_AWAKE_MS;
    pi_running = SleepyPi.checkPiStatus(kPI_CURRENT_THRESHOLD_MA,false);
    // Wait until either the Pi shuts down through user action i.e sudo shutdown -h now
    // or the timer expires
    while((pi_running == true) && (ElapsedTimeMs < TimeOutEnd)) {
        pi_running = SleepyPi.checkPiStatus(kPI_CURRENT_THRESHOLD_MA,false);
        ElapsedTimeMs = millis();
        delay(1000);
        // For debug and tuning (you'll need a programming cable of equivalent.
        // Uncomment and login to the Rpi. Issue a "sudo shutdown -h now" command and see what the
        // Current changes to. Use this to work out a shutdown current threshold.
        // Remember that the Timer here, will backstop this method and cut the power on time out.
        // Serial.print(pi_running);
        // Serial.print(" ");
        // Serial.println(SleepyPi.rpiCurrent());
    }

    // Start a shutdown
    if (pi_running == true) {
        // Do a commanded shutdown
        SleepyPi.piShutdown();
        SleepyPi.enableExtPower(false);
    }
    else {
        // Already shutdown so lets just cut the power
        SleepyPi.enablePiPower(false);
        SleepyPi.enableExtPower(false);
    }

}
